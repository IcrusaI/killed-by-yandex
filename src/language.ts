const language: { [index: string]: any } = {
  general: {
    ru_name: "–†—É—Å—Å–∫–∏–π",
    en_name: "English",
  },
  ru: {
    app_name: "–£–±–∏—Ç–æ –Ø–Ω–¥–µ–∫—Å–æ–º",
    description: "–ö–ª–∞–¥–±–∏—â–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ø–Ω–¥–µ–∫—Å–∞",
    select_language: "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫",
    search: "–ù–∞–π—Ç–∏...",
    service: "–°–µ—Ä–≤–∏—Å",
    app: "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
    hardware: "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
    all: "–í—Å–µ",
    more: "–°–ø–∏—Å–æ–∫ –µ—â—ë –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è...",
  },
  en: {
    app_name: "Killed by Yandex",
    description: "Yandex's Product Cemetery",
    select_language: "Select language",
    search: "Search...",
    service: "Service",
    app: "App",
    hardware: "Hardware",
    all: "All",
    more: "The list is still being updated...",
  },
};

export enum Languages {
  RU = "ru",
  EN = "en",
}

export const flags = {
  ru: "üá∑üá∫",
  en: "üá∫üá∏",
};
const defaultLang = Languages.RU;

let currentLang: Languages;

// todo

function checkLanguageSet() {
  if (currentLang === undefined) {
    const storageVal = localStorage.getItem("language");

    if (storageVal !== null) {
      currentLang = storageVal as Languages;

      return;
    }

    currentLang = defaultLang;
  }
}

export function getCurrentLanguage() {
  checkLanguageSet();

  return currentLang;
}

export function setCurrentLanguage(language: Languages) {
  currentLang = language;
  localStorage.setItem("language", language);
  location.reload();
}

export function get(str: string): string {
  checkLanguageSet();

  const langData = Object.assign(language[currentLang], language.general),
    langStr = langData[str];

  if (langStr === undefined) {
    throw currentLang + " language data does not have " + str;
  }

  return langStr;
}

const Language = {
  get,
  flags,
  Languages,
  getCurrentLanguage,
  setCurrentLanguage,
};

export default Language;
